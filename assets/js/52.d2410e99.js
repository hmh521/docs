(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{434:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"微服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务"}},[t._v("#")]),t._v(" 微服务")]),t._v(" "),a("h2",{attrs:{id:"springcloud的五大常用组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud的五大常用组件"}},[t._v("#")]),t._v(" SpringCloud的五大常用组件")]),t._v(" "),a("h3",{attrs:{id:"通常情况下-springcloud的五大常用组件是指以下五个组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通常情况下-springcloud的五大常用组件是指以下五个组件"}},[t._v("#")]),t._v(" 通常情况下，SpringCloud的五大常用组件是指以下五个组件：")]),t._v(" "),a("ol",[a("li",[t._v("Eureka：服务注册与发现")]),t._v(" "),a("li",[t._v("Ribbon：负载均衡")]),t._v(" "),a("li",[t._v("Feign：声明式服务调用")]),t._v(" "),a("li",[t._v("Hystrix：服务熔断与降级")]),t._v(" "),a("li",[t._v("Zuul：API网关")])]),t._v(" "),a("h3",{attrs:{id:"随着springcloud的发展-我们项目中使用了一些阿里巴巴的组件-如"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#随着springcloud的发展-我们项目中使用了一些阿里巴巴的组件-如"}},[t._v("#")]),t._v(" 随着SpringCloud的发展，我们项目中使用了一些阿里巴巴的组件，如：")]),t._v(" "),a("ol",[a("li",[t._v("Nacos：服务注册与发现/配置中心")]),t._v(" "),a("li",[t._v("Ribbon：负载均衡")]),t._v(" "),a("li",[t._v("Feign：声明式服务调用")]),t._v(" "),a("li",[t._v("sentinel：服务熔断与降级")]),t._v(" "),a("li",[t._v("Gateway：API网关")])]),t._v(" "),a("h2",{attrs:{id:"服务注册与发现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务注册与发现"}},[t._v("#")]),t._v(" 服务注册与发现")]),t._v(" "),a("h3",{attrs:{id:"服务注册与发现的核心组件是eureka和nacos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务注册与发现的核心组件是eureka和nacos"}},[t._v("#")]),t._v(" 服务注册与发现的核心组件是Eureka和Nacos")]),t._v(" "),a("h4",{attrs:{id:"eureka-服务注册与发现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureka-服务注册与发现"}},[t._v("#")]),t._v(" Eureka：服务注册与发现")]),t._v(" "),a("ul",[a("li",[t._v("服务注册：服务提供者需要把自己的信息注册到Eureka Server上，以便服务消费者能够找到。")]),t._v(" "),a("li",[t._v("服务发现：服务消费者从Eureka Server上获取服务提供者的信息，以便能够调用服务。")]),t._v(" "),a("li",[t._v("服务监控：服务提供者会每隔30s定时向Eureka Server发送心跳，以保证服务的可用性。如果90s内没有收到心跳，则Eureka Server会将该服务实例从注册表中删除。")])]),t._v(" "),a("h4",{attrs:{id:"nacos-服务注册与发现-配置中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nacos-服务注册与发现-配置中心"}},[t._v("#")]),t._v(" Nacos：服务注册与发现/配置中心")]),t._v(" "),a("ul",[a("li",[t._v("服务注册：服务提供者需要把自己的信息注册到Nacos Server上，以便服务消费者能够找到。")]),t._v(" "),a("li",[t._v("服务发现：服务消费者从Nacos Server上获取服务提供者的信息，以便能够调用服务。")]),t._v(" "),a("li",[t._v("配置中心：Nacos Server还可以作为配置中心，用于统一管理配置文件。")])]),t._v(" "),a("h4",{attrs:{id:"eureka和nacos的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureka和nacos的区别"}},[t._v("#")]),t._v(" Eureka和Nacos的区别")]),t._v(" "),a("ul",[a("li",[t._v("Eureka是Netflix公司开源的组件，Nacos是阿里巴巴公司开源的组件。")]),t._v(" "),a("li",[t._v("Eureka只能用于服务注册与发现，Nacos既可以用于服务注册与发现，也可以用于配置中心。")]),t._v(" "),a("li",[t._v("Nacos提供服务端主动检测提供者状态；临时实例采用心跳检测，非临时实例采用主动检测模式。")]),t._v(" "),a("li",[t._v("临时实例在心跳不正常时，会被删除；非临时实例不会被剔除。")]),t._v(" "),a("li",[t._v("Nacos支持服务列表变更的消息推送模式，Eureka不支持。")]),t._v(" "),a("li",[t._v("Nacos集群默认采用AP模式，当存在非临时实例，采用CP模式。Eureka集群默认采用AP模式。")])]),t._v(" "),a("h2",{attrs:{id:"ribbon负载均衡策有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon负载均衡策有哪些"}},[t._v("#")]),t._v(" Ribbon负载均衡策有哪些")]),t._v(" "),a("h3",{attrs:{id:"ribbon负载均衡策略有以下几种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon负载均衡策略有以下几种"}},[t._v("#")]),t._v(" Ribbon负载均衡策略有以下几种：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("轮询策略：依次轮询选择服务实例。")])]),t._v(" "),a("li",[a("strong",[t._v("随机策略：随机选择服务实例。")])]),t._v(" "),a("li",[a("strong",[t._v("权重策略：根据服务实例的权重选择服务实例。")])]),t._v(" "),a("li",[t._v("最小并发策略：选择并发量最小的服务实例。")]),t._v(" "),a("li",[t._v("重试策略：在一定次数内重试选择服务实例。")]),t._v(" "),a("li",[t._v("可用性敏感策略：先过滤非健康的服务实例，再选择连接数最少的服务实例。")]),t._v(" "),a("li",[t._v("区域感知策略：根据区域选择服务实例。")])]),t._v(" "),a("h3",{attrs:{id:"自定义负载均衡策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义负载均衡策略"}},[t._v("#")]),t._v(" 自定义负载均衡策略")]),t._v(" "),a("ol",[a("li",[t._v("自定义负载均衡策略需要实现IRule接口。（全局）")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRule")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IRule")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("choose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义负载均衡策略")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("自定义负载均衡策略 @Bean注入。（局部）")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IRule")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myRule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"什么是服务雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是服务雪崩"}},[t._v("#")]),t._v(" 什么是服务雪崩")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("定义")]),t._v(" "),a("p",[t._v("服务雪崩是指当一个服务出现故障时，由于服务之间的调用关系，可能会导致多个服务出现故障，最终导致整个系统不可用。")])]),t._v(" "),a("h3",{attrs:{id:"如何解决服务雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决服务雪崩"}},[t._v("#")]),t._v(" 如何解决服务雪崩")]),t._v(" "),a("ol",[a("li",[t._v("熔断降级 （解决）")]),t._v(" "),a("li",[t._v("限流 （预防）")])]),t._v(" "),a("h3",{attrs:{id:"服务降级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务降级"}},[t._v("#")]),t._v(" 服务降级")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("定义")]),t._v(" "),a("p",[t._v("服务降级是服务自我保护的一种方式,或者保护下游服务的一种方式，用于确保服务不会收到请求突增影响变得不可用，确保服务不会崩溃。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@FeignClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"service-provider"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fallback "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyFallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"服务熔断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务熔断"}},[t._v("#")]),t._v(" 服务熔断")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("定义")]),t._v(" "),a("p",[t._v("服务熔断用于监控某个服务的调用情况，当调用10s失败次数达到50%时，会触发熔断器，之后每隔五秒会尝试调用一次，如果调用成功，则关闭熔断器，否则继续等待。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开启服务熔断")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableCircuitBreaker")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 服务熔断")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@HystrixCommand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fallbackMethod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fallbackMethod"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置规则")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@HystrixCommand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commandProperties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@HystrixProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"circuitBreaker.requestVolumeThreshold"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@HystrixProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"circuitBreaker.sleepWindowInMilliseconds"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10000"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@HystrixProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"circuitBreaker.errorThresholdPercentage"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"60"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 服务熔断")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@HystrixCommand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fallbackMethod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fallbackMethod"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" commandProperties "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@HystrixProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"execution.isolation.thread.timeoutInMilliseconds"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3000"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"微服务监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务监控"}},[t._v("#")]),t._v(" 微服务监控")]),t._v(" "),a("h3",{attrs:{id:"skywalking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#skywalking"}},[t._v("#")]),t._v(" skywalking")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("定义")]),t._v(" "),a("p",[t._v("SkyWalking是一个开源的分布式APM系统，用于监控微服务架构中的应用性能。提供了完善的链路追踪功能。")])]),t._v(" "),a("ol",[a("li",[t._v("skywalking主要可以监控接口、服务、物理实例的一些状态。特别是在压测的时候可以看到众多服务中哪些服务和接口比较慢，我们可以针对性的分析和优化。")]),t._v(" "),a("li",[t._v("还可以设置告警规则，项目上线以后，如果报错，我们分别设置了可以给相关负责人发短信和发邮件，第一时间了解项目的bug情况。")])]),t._v(" "),a("h2",{attrs:{id:"微服务限流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务限流"}},[t._v("#")]),t._v(" 微服务限流")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("定义")]),t._v(" "),a("p",[t._v("限流是指对系统的访问流量进行限制，防止系统被过多的请求拖垮，导致系统不可用。")])]),t._v(" "),a("h3",{attrs:{id:"为什么要限流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要限流"}},[t._v("#")]),t._v(" 为什么要限流")]),t._v(" "),a("ol",[a("li",[t._v("并发的确大（突发流量）")]),t._v(" "),a("li",[t._v("防止用户恶意刷接口")])]),t._v(" "),a("h2",{attrs:{id:"实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现方式"}},[t._v("#")]),t._v(" 实现方式")]),t._v(" "),a("ol",[a("li",[t._v("Tomcat可以设置最大连接数")]),t._v(" "),a("li",[t._v("Nginx 漏桶算法")]),t._v(" "),a("li",[t._v("网关 令牌桶算法")]),t._v(" "),a("li",[t._v("自定义拦截器")])]),t._v(" "),a("h3",{attrs:{id:"nginx限流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx限流"}},[t._v("#")]),t._v(" Nginx限流")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[t._v("// 漏桶算法 限流 以固定速率处理请求\n"),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit_req_zone")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$binary_remote_addr")]),t._v(" zone=mylimit:10m rate=1r/s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit_req_zone=mylimit")]),t._v(" burst=5 nodelay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("语法 limit_req_zone key zone rate;")]),t._v(" "),a("li",[t._v("key：限流的key，可以是$binary_remote_addr、$server_name等。")]),t._v(" "),a("li",[t._v("zone：定义共享内存区域，来存储访问信息，10m可以存储16w个ip的访问信息。")]),t._v(" "),a("li",[t._v("rate：限流的速率，1r/s表示每秒1个请求。")]),t._v(" "),a("li",[t._v("burst：桶的大小，5表示最大并发数为5。")]),t._v(" "),a("li",[t._v("nodelay：快速处理请求，不会等待。")])]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[t._v("// 控制并发连接数\n"),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit_conn_zone")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$binary_remote_addr")]),t._v(" zone=mylimit:10m")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit_conn_zone")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$server_name")]),t._v(" zone=perserver:10m")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit_conn")]),t._v(" mylimit "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 限制并发连接数为5\n        "),a("span",{pre:!0,attrs:{class:"token directive"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit_conn")]),t._v(" perserver "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 限制每个server的并发连接数为10\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("limit_conn mylimit 5; 限制单个IP同时连接数为5")]),t._v(" "),a("li",[t._v("limit_conn perserver 10; 限制每个虚拟主机的最大并发连接数为10")])]),t._v(" "),a("h3",{attrs:{id:"网关限流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网关限流"}},[t._v("#")]),t._v(" 网关限流")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v(" // 令牌桶算法 限流 以固定速率处理请求\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" rate_limit_route\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8081")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/rateLimit\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("filters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" RequestRateLimiter\n              "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key-resolver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#{@userKeyResolver}"')]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis-rate-limiter.replenishRate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis-rate-limiter.burstCapacity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),a("ul",[a("li",[t._v("key-resolver 定义限流对象，使用SpEL表达式获取，需要代码实现")]),t._v(" "),a("li",[t._v("redis-rate-limiter.replenishRate: 1 令牌桶每秒填充速率")]),t._v(" "),a("li",[t._v("redis-rate-limiter.burstCapacity: 2 令牌桶最大容量")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserKeyResolver")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("KeyResolver")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerWebExchange")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("just")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRemoteAddress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAddress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHostAddress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("KeyResolver 限流对象接口")]),t._v(" "),a("li",[t._v("resolve 限流对象的实现方法")]),t._v(" "),a("li",[t._v("exchange.getRequest().getRemoteAddress().getAddress().getHostAddress() 获取请求的IP地址")]),t._v(" "),a("li",[t._v("Mono.just() 将IP地址包装成Mono对象")])]),t._v(" "),a("h2",{attrs:{id:"比较令牌桶和漏桶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较令牌桶和漏桶"}},[t._v("#")]),t._v(" 比较令牌桶和漏桶")]),t._v(" "),a("ol",[a("li",[t._v("漏桶：如果一下子来了很多请求，但是请求会被放在池子里面，然后以固定的速率去处理请求。")]),t._v(" "),a("li",[t._v("令牌桶：以固定的速率往桶内放入令牌，一下来很多请求，只要桶内的令牌足够多，请求就会立马被处理，这就是允许突发大量请求进来。")])]),t._v(" "),a("h2",{attrs:{id:"cap定理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cap定理"}},[t._v("#")]),t._v(" CAP定理")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("定义")]),t._v(" "),a("p",[t._v("CAP定理是分布式系统中最基本的理论，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）三者不可兼得。")])]),t._v(" "),a("ol",[a("li",[t._v("可用性：系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求都必须有响应。")]),t._v(" "),a("li",[t._v("一致性：系统中的数据一旦发生变化，所有的用户都能够立即看到。")]),t._v(" "),a("li",[t._v("分区容错性：系统在遇到网络分区故障时，仍然能够继续提供服务。")])]),t._v(" "),a("h3",{attrs:{id:"base理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base理论"}},[t._v("#")]),t._v(" BASE理论")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("定义")]),t._v(" "),a("p",[t._v("BASE理论是对CAP理论的延伸，是对大规模分布式系统的实践总结，核心思想是即使无法做到强一致性，但可以做到最终一致性。")])]),t._v(" "),a("ol",[a("li",[t._v("基本可用（Basically Available）：系统保证基本的可用性，允许损失部分可用性。")]),t._v(" "),a("li",[t._v("软状态（Soft state）：允许系统中的数据存在中间状态，不同节点的数据副本可能不一致。")]),t._v(" "),a("li",[t._v("最终一致性（Eventually Consistent）：系统保证在一段时间内，数据一致性最终能够达到。")])]),t._v(" "),a("h2",{attrs:{id:"分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[t._v("#")]),t._v(" 分布式事务")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("定义")]),t._v(" "),a("p",[t._v("分布式事务是指事务的参与者、资源、执行者分布在不同的节点上，分布式事务需要满足ACID特性。")])]),t._v(" "),a("h3",{attrs:{id:"seata架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#seata架构"}},[t._v("#")]),t._v(" Seata架构")]),t._v(" "),a("ul",[a("li",[t._v("TC（Transaction Coordinator）：事务协调器，负责全局事务的协调。")]),t._v(" "),a("li",[t._v("TM（Transaction Manager）：事务管理器，负责事务的开启、提交、回滚。")]),t._v(" "),a("li",[t._v("RM（Resource Manager）：资源管理器，负责分支事务的注册、状态汇报、回滚。")])]),t._v(" "),a("h4",{attrs:{id:"seata的xa模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#seata的xa模式"}},[t._v("#")]),t._v(" Seata的XA模式")]),t._v(" "),a("ol",[a("li",[t._v("CP，需要互相等待各个分支的事务提交，可以保证强一致性，但是性能较差。（银行业务）")])]),t._v(" "),a("h4",{attrs:{id:"seata的at模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#seata的at模式"}},[t._v("#")]),t._v(" Seata的AT模式")]),t._v(" "),a("ol",[a("li",[t._v("AP，底层使用数据库的undo log，可以保证最终一致性，性能较好。（电商业务）")])]),t._v(" "),a("h4",{attrs:{id:"seata的tcc模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#seata的tcc模式"}},[t._v("#")]),t._v(" Seata的TCC模式")]),t._v(" "),a("ol",[a("li",[t._v("AP，通过Try-Confirm-Cancel三个操作实现分布式事务，可以保证最终一致性，性能较好。（酒店预订）")])]),t._v(" "),a("h4",{attrs:{id:"mq实现分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mq实现分布式事务"}},[t._v("#")]),t._v(" MQ实现分布式事务")]),t._v(" "),a("ol",[a("li",[t._v("在A服务写数据的时候，需要在同一事务中发送消息到另外一个事务，异步，性能最好")])]),t._v(" "),a("h2",{attrs:{id:"分布式服务的接口幂等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式服务的接口幂等性"}},[t._v("#")]),t._v(" 分布式服务的接口幂等性")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("定义")]),t._v(" "),a("p",[t._v("接口幂等性是指对于同一个接口的多次调用，对于系统的状态和数据都是一致的，不会因为多次调用而产生副作用。")])]),t._v(" "),a("ul",[a("li",[t._v("用户重复点击（网络波动）")]),t._v(" "),a("li",[t._v("MQ消息重复")]),t._v(" "),a("li",[t._v("应用使用失败或超时重复机制")])]),t._v(" "),a("h3",{attrs:{id:"接口幂等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口幂等"}},[t._v("#")]),t._v(" 接口幂等")]),t._v(" "),a("ol",[a("li",[t._v("GET请求：幂等性是指对于同一个请求的多次调用，返回的结果是一致的。")]),t._v(" "),a("li",[t._v("POST请求：不是幂等的，因为POST请求每次请求都会创建一个新的资源。")]),t._v(" "),a("li",[t._v("PUT请求：不是幂等的，因为PUT请求每次请求都会更新一个资源。")]),t._v(" "),a("li",[t._v("DELETE请求：幂等性是指对于同一个请求的多次调用，返回的结果是一致的。")])]),t._v(" "),a("h3",{attrs:{id:"实现幂等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现幂等性"}},[t._v("#")]),t._v(" 实现幂等性")]),t._v(" "),a("ol",[a("li",[t._v("如果是新增操作，可以使用唯一索引，保证幂等性。")]),t._v(" "),a("li",[t._v("如果是新增或更改操作")])]),t._v(" "),a("ul",[a("li",[t._v("分布式锁：使用Redis分布式锁，保证幂等性。")]),t._v(" "),a("li",[t._v("使用token+redis实现，性能比较好\n"),a("ul",[a("li",[t._v("第一次请求生成token，存入redis，返回给前端")]),t._v(" "),a("li",[t._v("前端请求携带token，后端校验token，删除token")])])])]),t._v(" "),a("h3",{attrs:{id:"分布式任务调度-xxl-job"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式任务调度-xxl-job"}},[t._v("#")]),t._v(" 分布式任务调度 XXL-JOB")]),t._v(" "),a("h3",{attrs:{id:"xxl-job的路由策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xxl-job的路由策略"}},[t._v("#")]),t._v(" XXL-JOB的路由策略")]),t._v(" "),a("ol",[a("li",[t._v("第一种策略：轮询策略，每次调度都是按照顺序轮询调度。")]),t._v(" "),a("li",[t._v("第二种策略：故障转移策略，当某个执行器挂掉的时候，会自动切换到另外一个执行器。")]),t._v(" "),a("li",[t._v("第三种策略：分片广播策略，每个执行器都会执行一次任务。")])]),t._v(" "),a("h3",{attrs:{id:"xxl-job的任务执行失败怎么解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xxl-job的任务执行失败怎么解决"}},[t._v("#")]),t._v(" XXL-JOB的任务执行失败怎么解决")]),t._v(" "),a("ul",[a("li",[t._v("路由策略如果是故障转移策略，使用健康的实例执行任务")]),t._v(" "),a("li",[t._v("设置重试次数，如果任务执行失败，会自动重试")]),t._v(" "),a("li",[t._v("查看日志+邮件告警来通知相关负责人")])]),t._v(" "),a("h3",{attrs:{id:"如果有大数据量的任务同时都需要执行-怎么解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果有大数据量的任务同时都需要执行-怎么解决"}},[t._v("#")]),t._v(" 如果有大数据量的任务同时都需要执行，怎么解决")]),t._v(" "),a("ul",[a("li",[t._v("让多个实例一块去执行，路由策略使用分片广播策略")]),t._v(" "),a("li",[t._v("在任务执行的代码中可以获取分片总数和当前分片，按照取模的方式分摊到各个实例去执行")])])])}),[],!1,null,null,null);a.default=e.exports}}]);
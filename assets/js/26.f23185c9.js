(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{392:function(a,t,s){a.exports=s.p+"assets/img/3cache.1b5040c7.png"},393:function(a,t,s){a.exports=s.p+"assets/img/springmvc.10c72d1f.png"},433:function(a,t,s){"use strict";s.r(t);var n=s(14),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"spring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[a._v("#")]),a._v(" Spring")]),a._v(" "),t("h2",{attrs:{id:"spring中的单例bean是线程安全的吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring中的单例bean是线程安全的吗"}},[a._v("#")]),a._v(" Spring中的单例Bean是线程安全的吗？")]),a._v(" "),t("ul",[t("li",[a._v("singleton Bean 是线程安全的，因为 Spring 容器会保证在同一个容器中，一个 Bean 只有一个实例。")]),a._v(" "),t("li",[a._v("prototype Bean 是非线程安全的，因为每次获取 Prototype Bean 时，Spring 都会创建一个新的实例。")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Scope")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"singleton"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 默认是单例")]),a._v("\n")])])]),t("p",[a._v("解答：\n"),t("span",{staticStyle:{color:"#E8323C"}},[a._v("只是某种程度上线程安全"),t("span",[t("br")])])]),a._v(" "),t("p",[t("strong",[a._v("不是线程安全的")]),a._v("，因为单例 Bean 的属性是共享的，如果多个线程同时访问一个单例 Bean 的属性，可能会出现线程安全问题。"),t("strong",[a._v("可以通过加锁/多实例解决")]),a._v("。")]),a._v(" "),t("h2",{attrs:{id:"什么是aop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是aop"}},[a._v("#")]),a._v(" 什么是AOP？")]),a._v(" "),t("p",[a._v("AOP（Aspect Oriented Programming）面向切面编程，用于将与业务无关，但却对多个对象产生影响的公共行为封装到一个独立的模块中，这些公共行为成为切面（Aspect），减少重复代码，提高代码的复用性。")]),a._v(" "),t("ol",[t("li",[a._v("对方法的增强，不需要修改原有的代码，只需要在需要增强的方法上添加一个切面，即可实现增强。")])]),a._v(" "),t("p",[a._v("可以通过 AOP 实现的功能：")]),a._v(" "),t("ul",[t("li",[a._v("日志记录")]),a._v(" "),t("li",[a._v("事务处理")])]),a._v(" "),t("h2",{attrs:{id:"spring中的事务是如何实现的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring中的事务是如何实现的"}},[a._v("#")]),a._v(" Spring中的事务是如何实现的？")]),a._v(" "),t("p",[a._v("Spring 事务的实现是基于 AOP 的，通过 AOP 实现事务管理，Spring 提供了两种事务管理方式：")]),a._v(" "),t("ol",[t("li",[a._v("编程式事务管理")])]),a._v(" "),t("p",[a._v("通过 TransactionTemplate实现编程式事务管理，对业务代码进行事务管理。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TransactionTemplate")]),a._v(" transactionTemplate "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TransactionTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("transactionManager"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \ntransactionTemplate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("execute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TransactionCallbackWithoutResult")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("  \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("doInTransactionWithoutResult")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TransactionStatus")]),a._v(" status"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("  \n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 业务代码  ")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("声明式事务管理 本质是 AOP 通过代理对象实现的")])]),a._v(" "),t("p",[a._v("通过 @Transactional 注解实现声明式事务管理，对业务方法进行事务管理。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Transactional")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("insertUser")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 业务代码")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("h2",{attrs:{id:"spring中的事务失效场景有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring中的事务失效场景有哪些"}},[a._v("#")]),a._v(" Spring中的事务失效场景有哪些？")]),a._v(" "),t("ol",[t("li",[a._v("异常被捕获  事务默认只在抛出运行时异常时回滚，如果异常被捕获，事务将不会回滚。")]),a._v(" "),t("li",[a._v("抛出检查异常  事务默认只在抛出运行时异常时回滚，如果抛出检查异常，事务将不会回滚。（加上 rollbackFor = Exception.class 可以回滚）")]),a._v(" "),t("li",[a._v("非public方法导致事务失效  Spring 事务是通过 AOP 实现的，只能对 public 方法进行事务管理，非 public 方法事务失效。")])]),a._v(" "),t("h2",{attrs:{id:"beandefinition是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition是什么"}},[a._v("#")]),a._v(" BeanDefinition是什么？")]),a._v(" "),t("blockquote",[t("p",[a._v("Spring容器在进行实例化时，会将xml配置的"),t("bean",[a._v("的信息封装成BeanDefinition对象，BeanDefinition对象是对bean配置信息的封装，包括bean的类名、属性、构造方法、初始化方法、销毁方法等。")])],1)]),a._v(" "),t("ul",[t("li",[a._v("beanClassName：bean的类名")]),a._v(" "),t("li",[a._v("scope：bean的作用域")]),a._v(" "),t("li",[a._v("lazyInit：是否懒加载")]),a._v(" "),t("li",[a._v("initMethodName：初始化方法")]),a._v(" "),t("li",[a._v("propertyValues：属性值")])]),a._v(" "),t("h2",{attrs:{id:"spring的bean的初始化过程是怎样的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring的bean的初始化过程是怎样的"}},[a._v("#")]),a._v(" Spring的Bean的初始化过程是怎样的？")]),a._v(" "),t("ol",[t("li",[a._v("构造函数 BeanDefinition")]),a._v(" "),t("li",[a._v("依赖注入")]),a._v(" "),t("li",[a._v("Aware接口回调")]),a._v(" "),t("li",[a._v("BeanPostProcessor的前置处理")]),a._v(" "),t("li",[a._v("初始化方法 InitializingBean 自定义初始化方法")]),a._v(" "),t("li",[a._v("BeanPostProcessor的后置处理 AOP")])]),a._v(" "),t("p",[a._v("总结：Bean的初始化过程是在Bean的实例化之后，初始化之前，通过BeanPostProcessor的前置处理和后置处理来实现的。")]),a._v(" "),t("h2",{attrs:{id:"什么是spring的循环依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring的循环依赖"}},[a._v("#")]),a._v(" 什么是Spring的循环依赖？")]),a._v(" "),t("blockquote",[t("p",[a._v("Spring容器在实例化Bean时，如果A依赖B，B依赖A，就会产生循环依赖。")])]),a._v(" "),t("p",[a._v("Spring解决循环依赖的方式：三级缓存")]),a._v(" "),t("ol",[t("li",[a._v("一级缓存 singletonObjects：存放完全初始化的Bean")]),a._v(" "),t("li",[a._v("二级缓存 earlySingletonObjects：存放原始的Bean")]),a._v(" "),t("li",[a._v("三级缓存 singletonFactories：存放Bean的工厂")])]),a._v(" "),t("p",[t("img",{attrs:{src:s(392),alt:"3cache"}})]),a._v(" "),t("h3",{attrs:{id:"构造方法出现循环依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造方法出现循环依赖"}},[a._v("#")]),a._v(" 构造方法出现循环依赖")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),a._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),a._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("b "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("解决方式：通过**@Lazy**注解实现懒加载，什么时候需要Bean时再去创建Bean。")]),a._v(" "),t("h2",{attrs:{id:"springmvc的执行流程是怎样的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springmvc的执行流程是怎样的"}},[a._v("#")]),a._v(" SpringMVC的执行流程是怎样的？")]),a._v(" "),t("p",[t("img",{attrs:{src:s(393),alt:"springmvc"}})]),a._v(" "),t("ol",[t("li",[a._v("用户发送请求到前端控制器 DispatcherServlet")]),a._v(" "),t("li",[a._v("DispatcherServlet 根据请求信息调用 HandlerMapping（处理映射器）")]),a._v(" "),t("li",[a._v("HandlerMapping找到具体的处理器，生成处理器对象及处理器拦截器一并返回给 DispatcherServlet")]),a._v(" "),t("li",[a._v("DispatcherServlet 调用 HandlerAdapter （处理器适配器）")]),a._v(" "),t("li",[a._v("HandlerAdapter 经过适配调用具体的处理器(Controller，也叫后端控制器)")]),a._v(" "),t("li",[a._v("Controller 执行完成返回 ModelAndView")]),a._v(" "),t("li",[a._v("处理器适配器将 Controller 执行结果 ModelAndView 返回给 DispatcherServlet")]),a._v(" "),t("li",[a._v("DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器")]),a._v(" "),t("li",[a._v("视图解析器解析后返回具体 View")]),a._v(" "),t("li",[a._v("DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中）")]),a._v(" "),t("li",[a._v("DispatcherServlet 响应用户")])]),a._v(" "),t("h2",{attrs:{id:"springboot自动装配原理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springboot自动装配原理是什么"}},[a._v("#")]),a._v(" SpringBoot自动装配原理是什么？")]),a._v(" "),t("p",[a._v("SpringBoot的自动装配是通过 @EnableAutoConfiguration 注解实现的，@EnableAutoConfiguration 注解是 SpringBoot 的核心注解之一，用于开启自动配置功能。")]),a._v(" "),t("ul",[t("li",[a._v("@EnableAutoConfiguration 该注解通过@Import注解导入对应的配置选择器。")]),a._v(" "),t("li",[a._v("内部就是读取META-INF/spring.factories文件。")]),a._v(" "),t("li",[a._v("根据条件注解例如@ConditionalOnClass来判断是否是否有对应的class文件，如果有则自动配置。")])]),a._v(" "),t("h2",{attrs:{id:"spring的常见注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring的常见注解"}},[a._v("#")]),a._v(" Spring的常见注解")]),a._v(" "),t("ol",[t("li",[t("code",[a._v("@Component")]),a._v("、"),t("code",[a._v("@Service")]),a._v("、"),t("code",[a._v("@Controller")]),a._v("、"),t("code",[a._v("@Repository")]),a._v("：用于标注Bean")]),a._v(" "),t("li",[t("code",[a._v("@Autowired")]),a._v("：自动装配")]),a._v(" "),t("li",[t("code",[a._v("@Qualiifer")]),a._v("：根据名称进行依赖注入")]),a._v(" "),t("li",[t("code",[a._v("@Scope")]),a._v("：设置Bean的作用域")]),a._v(" "),t("li",[t("code",[a._v("@Configration")]),a._v("：配置类")]),a._v(" "),t("li",[t("code",[a._v("@Bean")]),a._v("：定义Bean")]),a._v(" "),t("li",[t("code",[a._v("@ComponentScan")]),a._v("：扫描包")]),a._v(" "),t("li",[t("code",[a._v("@Import")]),a._v("：使用@Import导入的类会被Spring容器托管")]),a._v(" "),t("li",[t("code",[a._v("@Aspect")]),a._v("、"),t("code",[a._v("@Pointcut")]),a._v("、"),t("code",[a._v("@Before")]),a._v("、"),t("code",[a._v("@After")]),a._v("、"),t("code",[a._v("@Around")]),a._v("：用于切面编程")])]),a._v(" "),t("h2",{attrs:{id:"springmvc的常见注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springmvc的常见注解"}},[a._v("#")]),a._v(" SpringMVC的常见注解")]),a._v(" "),t("ol",[t("li",[t("code",[a._v("@RequestMapping")]),a._v("：用于映射请求路径，可以定义在类上或方法上")]),a._v(" "),t("li",[t("code",[a._v("@RequestBody")]),a._v("：注解实现接收http请求的json数据，将json数据转换为对象")]),a._v(" "),t("li",[t("code",[a._v("@ResponseBody")]),a._v("：注解实现将controller方法返回的对象转为json格式")]),a._v(" "),t("li",[t("code",[a._v("@PathVariable")]),a._v("：用于接收路径参数")]),a._v(" "),t("li",[t("code",[a._v("@RequestParam")]),a._v("：用于接收请求参数")]),a._v(" "),t("li",[t("code",[a._v("@RequestHeader")]),a._v("：用于接收请求头信息")]),a._v(" "),t("li",[t("code",[a._v("@RestController")]),a._v("：相当于@Controller和@ResponseBody的结合")])]),a._v(" "),t("h2",{attrs:{id:"springboot的常见注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springboot的常见注解"}},[a._v("#")]),a._v(" SpringBoot的常见注解")]),a._v(" "),t("ol",[t("li",[t("code",[a._v("@SpringBootApplication")]),a._v("：SpringBoot的核心注解，用于开启自动配置")]),a._v(" "),t("li",[t("code",[a._v("@EnableAutoConfiguration")]),a._v("：开启自动配置")]),a._v(" "),t("li",[t("code",[a._v("@ComponentScan")]),a._v("：扫描包")])])])}),[],!1,null,null,null);t.default=e.exports}}]);
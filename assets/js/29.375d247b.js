(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{380:function(s,a,t){s.exports=t.p+"assets/img/aggregate.cd62678e.png"},408:function(s,a,t){"use strict";t.r(a);var r=t(14),v=Object(r.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[s._v("#")]),s._v(" 集合")]),s._v(" "),a("h2",{attrs:{id:"集合框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合框架"}},[s._v("#")]),s._v(" 集合框架")]),s._v(" "),a("h3",{attrs:{id:"单例集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例集合"}},[s._v("#")]),s._v(" 单例集合")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("java.util.Collections")]),s._v("类提供了一系列静态方法，可以返回一个只包含指定对象的不可变集合。")]),s._v(" "),a("li",[s._v("List 有序，可重复\n"),a("ul",[a("li",[s._v("Vector 线程安全 数组")]),s._v(" "),a("li",[s._v("ArrayList  线程不安全 数组")]),s._v(" "),a("li",[s._v("LinkedList 线程不安全 双向链表")])])]),s._v(" "),a("li",[s._v("Set 无序，不可重复\n"),a("ul",[a("li",[s._v("HashSet 哈希表结构 -- LinkedHashSet 哈希表和链表结构")]),s._v(" "),a("li",[s._v("TreeSet 红黑树结构")])])])]),s._v(" "),a("h3",{attrs:{id:"双列集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双列集合"}},[s._v("#")]),s._v(" 双列集合")]),s._v(" "),a("ul",[a("li",[s._v("Map 键值对\n"),a("ul",[a("li",[s._v("HashMap 哈希表结构 -- LinkedHashMap 哈希表和链表结构")]),s._v(" "),a("li",[s._v("TreeMap 红黑树结构")]),s._v(" "),a("li",[s._v("HashTable 线程安全 哈希表结构 -- properties")]),s._v(" "),a("li",[s._v("ConcurrentHashMap 线程安全 哈希表结构")])])])]),s._v(" "),a("h2",{attrs:{id:"时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[s._v("#")]),s._v(" 时间复杂度")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("时间复杂度")]),s._v(" "),a("p",[s._v("评估代码的执行耗时")])]),s._v(" "),a("ul",[a("li",[s._v("大O表示法 表示代码执行时间随数据规模增长的变化趋势\n"),a("ul",[a("li",[s._v("O(1) 常数时间")]),s._v(" "),a("li",[s._v("O(logN) 对数时间")]),s._v(" "),a("li",[s._v("O(N) 线性时间")]),s._v(" "),a("li",[s._v("O(NlogN) 线性对数时间")]),s._v(" "),a("li",[s._v("O(N^2) 平方时间")]),s._v(" "),a("li",[s._v("O(N^3) 立方时间")]),s._v(" "),a("li",[s._v("O(2^N) 指数时间")]),s._v(" "),a("li",[s._v("O(N!) 阶乘时间\n性能从好到坏排序：O(1) < O(logN) < O(N) < O(NlogN) < O(N^2) < O(N^3) < O(2^N) < O(N!)")])])]),s._v(" "),a("li",[s._v("常对幂指阶\n"),a("img",{attrs:{src:t(380),alt:"aggregate.png"}})])]),s._v(" "),a("h2",{attrs:{id:"空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[s._v("#")]),s._v(" 空间复杂度")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("空间复杂度")]),s._v(" "),a("p",[s._v("评估代码的内存消耗")])]),s._v(" "),a("ul",[a("li",[s._v("空间复杂度是对一个算法在运行过程中临时占用存储空间大小的量度")]),s._v(" "),a("li",[s._v("常见的空间复杂度\n"),a("ul",[a("li",[s._v("O(1) 常数空间")]),s._v(" "),a("li",[s._v("O(N) 线性空间")]),s._v(" "),a("li",[s._v("O(N^2) 平方空间")])])])]),s._v(" "),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[s._v("#")]),s._v(" 数组")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("数组")]),s._v(" "),a("p",[s._v("数组是一种用"),a("strong",[s._v("连续")]),s._v("的内存空间存储"),a("strong",[s._v("相同类型数据")]),s._v("的结构")])]),s._v(" "),a("ul",[a("li",[s._v("数组里面存的是"),a("strong",[s._v("引用")]),s._v("，引用指向对象，即栈指向堆")])]),s._v(" "),a("h3",{attrs:{id:"数组如何获取其他元素的地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组如何获取其他元素的地址"}},[s._v("#")]),s._v(" 数组如何获取其他元素的地址？")]),s._v(" "),a("ul",[a("li",[s._v("数组元素的地址 = 首地址 + 下标 * 元素大小")])]),s._v(" "),a("h3",{attrs:{id:"为什么数组索引从0开始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么数组索引从0开始"}},[s._v("#")]),s._v(" 为什么数组索引从0开始？")]),s._v(" "),a("ul",[a("li",[s._v("在数组根据索引查找元素时，计算地址的公式为：数组首地址 + 索引 * 元素大小")]),s._v(" "),a("li",[s._v("如果索引从1开始，计算地址的公式为：数组首地址 + (索引-1) * 元素大小")]),s._v(" "),a("li",[s._v("需要增加一次减法运算，对于cpu来说，多了一次指令，效率降低")])]),s._v(" "),a("h3",{attrs:{id:"数组的时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组的时间复杂度"}},[s._v("#")]),s._v(" 数组的时间复杂度")]),s._v(" "),a("ol",[a("li",[s._v("根据索引 O（1）")]),s._v(" "),a("li",[s._v("不排序查找元素 O（n） 排序后O（logn）")]),s._v(" "),a("li",[s._v("删除/插入 最好O（1），最坏O（n）")])]),s._v(" "),a("h2",{attrs:{id:"arraylist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist"}},[s._v("#")]),s._v(" ArrayList")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("ArrayList")]),s._v(" "),a("p",[s._v("数组实现，查询快，增删慢")])]),s._v(" "),a("ul",[a("li",[s._v("默认的初始化容量是0，如果不指定容量，会在第一次添加元素时进行扩容，扩容到默认容量10")]),s._v(" "),a("li",[s._v("扩容机制：新容量 = 旧容量 + 旧容量 >> 1 （即1.5倍）")]),s._v(" "),a("li",[s._v("扩容时，会将原数组的元素复制到新数组中")]),s._v(" "),a("li",[s._v("删除元素时，会将删除元素后面的元素向前移动一位")]),s._v(" "),a("li",[s._v("插入元素时，会将插入位置后面的元素向后移动一位")]),s._v(" "),a("li",[s._v("ArrayList是线程不安全的，适合在单线程中使用")])]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n指定了容量为"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("，未扩容\n")])])]),a("h3",{attrs:{id:"如何实现数组和list的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现数组和list的转换"}},[s._v("#")]),s._v(" 如何实现数组和List的转换？")]),s._v(" "),a("ol",[a("li",[s._v("数组转List")])]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("List转数组")])]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("ul",[a("li",[s._v("Arrays.asList 修改了数组，list会随之改变")]),s._v(" "),a("li",[s._v("list.toArray() 修改了list，数组不会改变")])]),s._v(" "),a("h2",{attrs:{id:"单向链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单向链表"}},[s._v("#")]),s._v(" 单向链表")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("单向链表")]),s._v(" "),a("p",[s._v("链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现的")])]),s._v(" "),a("ul",[a("li",[s._v("链表的每个节点包含两个部分：数据域和指针域")]),s._v(" "),a("li",[s._v("数据域用来存储数据，指针域用来指向下一个节点的位置")])]),s._v(" "),a("h3",{attrs:{id:"单向链表的时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单向链表的时间复杂度"}},[s._v("#")]),s._v(" 单向链表的时间复杂度")]),s._v(" "),a("ol",[a("li",[s._v("查询头结点 O（1） 查询尾结点O（n） 查询中间结点O（n）")]),s._v(" "),a("li",[s._v("插入/删除头结点 O（1） 插入/删除尾结点O（n） 插入/删除中间结点O（n）")])]),s._v(" "),a("h2",{attrs:{id:"双向链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双向链表"}},[s._v("#")]),s._v(" 双向链表")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("双向链表")]),s._v(" "),a("p",[s._v("双向链表是在单向链表的基础上，每个节点增加一个指向前一个节点的指针")])]),s._v(" "),a("ul",[a("li",[s._v("双向链表的每个节点包含三个部分：数据域、指向前一个节点的指针域和指向后一个节点的指针域")])]),s._v(" "),a("h3",{attrs:{id:"双向链表的时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双向链表的时间复杂度"}},[s._v("#")]),s._v(" 双向链表的时间复杂度")]),s._v(" "),a("ol",[a("li",[s._v("查询头结点 O（1） 查询尾结点O（1） 查询中间结点O（n）")]),s._v(" "),a("li",[s._v("插入/删除头结点 O（1） 插入/删除尾结点O（1） 插入/删除中间结点O（n）")])]),s._v(" "),a("h2",{attrs:{id:"arraylist和linkedlist的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist和linkedlist的区别"}},[s._v("#")]),s._v(" ArrayList和LinkedList的区别")]),s._v(" "),a("h3",{attrs:{id:"底层实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#底层实现"}},[s._v("#")]),s._v(" 底层实现")]),s._v(" "),a("ul",[a("li",[s._v("ArrayList是基于数组实现的，查询快，增删慢")]),s._v(" "),a("li",[s._v("LinkedList是基于双向链表实现的，查询慢，增删快")])]),s._v(" "),a("h3",{attrs:{id:"操作效率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作效率"}},[s._v("#")]),s._v(" 操作效率")]),s._v(" "),a("ul",[a("li",[s._v("ArrayList查询效率高，增删效率低")]),s._v(" "),a("li",[s._v("LinkedList查询效率低，增删效率高")])]),s._v(" "),a("h3",{attrs:{id:"线程安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程安全"}},[s._v("#")]),s._v(" 线程安全")]),s._v(" "),a("ul",[a("li",[s._v("ArrayList是线程不安全的")]),s._v(" "),a("li",[s._v("LinkedList是线程不安全的")])]),s._v(" "),a("h3",{attrs:{id:"内存占用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存占用"}},[s._v("#")]),s._v(" 内存占用")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("ArrayList底层是数组，内存连续，节省内存")])]),s._v(" "),a("li",[a("p",[s._v("LinkedList底层是链表，内存不连续，占用内存大，多两个指针")])]),s._v(" "),a("li",[a("p",[s._v("保证线程安全")])])]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("synchronizedList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("synchronizedList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[s._v("#")]),s._v(" 二叉树")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("二叉树")]),s._v(" "),a("p",[s._v("每个节点最多有两个子节点的树结构")])]),s._v(" "),a("ul",[a("li",[s._v("满二叉树：每个节点都有两个子节点")]),s._v(" "),a("li",[s._v("完全二叉树：除了最后一层，其他层都是满的，最后一层的节点都靠左排列")]),s._v(" "),a("li",[s._v("二叉搜索树：左子树上所有节点的值均小于根节点的值，右子树上所有节点的值均大于根节点的值")]),s._v(" "),a("li",[s._v("平衡二叉树：左右子树的高度差不超过1")])]),s._v(" "),a("h2",{attrs:{id:"红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[s._v("#")]),s._v(" 红黑树")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("红黑树")]),s._v(" "),a("p",[s._v("红黑树是一种自平衡二叉查找树，是一种近似平衡的二叉树")])]),s._v(" "),a("ol",[a("li",[s._v("每个节点要么是红色，要么是黑色")]),s._v(" "),a("li",[s._v("根节点是黑色")]),s._v(" "),a("li",[s._v("叶子节点都说黑色的空节点（NIL节点）")]),s._v(" "),a("li",[s._v("红黑树中红色节点的子节点都是黑色")]),s._v(" "),a("li",[s._v("从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点")])]),s._v(" "),a("h3",{attrs:{id:"时间复杂度-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度-2"}},[s._v("#")]),s._v(" 时间复杂度")]),s._v(" "),a("ul",[a("li",[s._v("插入、删除、查找 O（logn）")])]),s._v(" "),a("h2",{attrs:{id:"散列表-哈希表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#散列表-哈希表"}},[s._v("#")]),s._v(" 散列表(哈希表)")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("散列表")]),s._v(" "),a("p",[s._v("散列表是一种数据结构，通过散列函数将关键字映射到表中的一个位置，以加快查找速度")])]),s._v(" "),a("ul",[a("li",[s._v("将key映射为数组下标的函数叫做散列函数，可以表示为hash(key) = hashValue")]),s._v(" "),a("li",[s._v("如果key相同，hash后的值也应该相同")])]),s._v(" "),a("h3",{attrs:{id:"链表法的时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表法的时间复杂度"}},[s._v("#")]),s._v(" 链表法的时间复杂度")]),s._v(" "),a("ul",[a("li",[s._v("插入、删除、查找 O（1）")]),s._v(" "),a("li",[s._v("如果链表长度为n，时间复杂度为O（n）")]),s._v(" "),a("li",[s._v("链表变成红黑树，时间复杂度为O（logn）")])]),s._v(" "),a("h3",{attrs:{id:"将链表变成红黑树的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将链表变成红黑树的好处"}},[s._v("#")]),s._v(" 将链表变成红黑树的好处")]),s._v(" "),a("ol",[a("li",[s._v("可以防止DDOS攻击")])]),s._v(" "),a("h4",{attrs:{id:"ddos攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ddos攻击"}},[s._v("#")]),s._v(" DDOS攻击")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("DDOS攻击")]),s._v(" "),a("p",[s._v("DDOS攻击是一种分布式拒绝服务攻击，攻击者通过大量的请求占用服务器资源，导致服务器无法正常提供服务")])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("可以提高查询效率")])]),s._v(" "),a("h2",{attrs:{id:"散列冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#散列冲突"}},[s._v("#")]),s._v(" 散列冲突")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("散列冲突")]),s._v(" "),a("p",[s._v("散列冲突是指两个不同的key通过散列函数映射到同一个位置")])]),s._v(" "),a("h2",{attrs:{id:"hashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[s._v("#")]),s._v(" HashMap")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("HashMap")]),s._v(" "),a("p",[s._v("HashMap是基于散列表实现的，是一种无序的数据结构")])]),s._v(" "),a("ul",[a("li",[s._v("默认初始容量16，负载因子0.75")]),s._v(" "),a("li",[s._v("扩容阈值 = 容量 * 负载因子")]),s._v(" "),a("li",[s._v("扩容后容量 = 容量 * 2")]),s._v(" "),a("li",[s._v("HashMap是懒加载的，只有在第一次put的时候才会初始化数组")]),s._v(" "),a("li",[s._v("HashMap是线程不安全的，可以通过Collections.synchronizedMap()方法保证线程安全")]),s._v(" "),a("li",[s._v("HashMap的key和value都可以为null")]),s._v(" "),a("li",[s._v("链表的长度大于8时，且数组长度大于64时，链表会转换为红黑树")]),s._v(" "),a("li",[s._v("扩容之后，会创建一个新的数组，将原数组的元素重新散列到新数组中\n"),a("ul",[a("li",[s._v("重新散列的方法是通过hash & (newCapacity - 1)来计算新的位置")]),s._v(" "),a("li",[s._v("红黑树的元素不会重新散列，因为红黑树的元素是有序的")]),s._v(" "),a("li",[s._v("如果是链表，会将链表拆分成两个链表，判断e.hash & oldCap == 0的元素放在原位置，否则放在原位置+oldCap")])])])]),s._v(" "),a("h3",{attrs:{id:"为什么hashmap的容量是2的幂次方"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么hashmap的容量是2的幂次方"}},[s._v("#")]),s._v(" 为什么HashMap的容量是2的幂次方")]),s._v(" "),a("ol",[a("li",[s._v("计算索引时，效率高，可以使用位与运算代替取模运算")]),s._v(" "),a("li",[s._v("扩容时，重新计算索引时：hash & oldCap == 0的元素放在原位置，否则放在原位置+oldCap")])]),s._v(" "),a("h3",{attrs:{id:"hashmap的寻址方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的寻址方式"}},[s._v("#")]),s._v(" hashMap的寻址方式")]),s._v(" "),a("ol",[a("li",[s._v("计算对象的hashcode")]),s._v(" "),a("li",[s._v("再进行一次hash，将hashcode值右移16位，与原hashcode值进行异或运算，得到的值作为最终的hash值")]),s._v(" "),a("li",[s._v("最后 (capacity - 1) & hash，得到的值就是对象在数组中的位置")])]),s._v(" "),a("h3",{attrs:{id:"为什么hashmap的负载因子是0-75"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么hashmap的负载因子是0-75"}},[s._v("#")]),s._v(" 为什么HashMap的负载因子是0.75")]),s._v(" "),a("ul",[a("li",[s._v("负载因子是指散列表的填充因子，负载因子越大，填充的元素越多，空间利用率越高，但是会增加冲突的概率")]),s._v(" "),a("li",[s._v("负载因子越小，填充的元素越少，空间利用率越低，但是冲突的概率越小")]),s._v(" "),a("li",[s._v("0.75是一个折中的值，可以保证空间利用率和冲突的概率都在一个合理的范围内")])]),s._v(" "),a("h3",{attrs:{id:"hashmap1-7-在多线程下出现死循环的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap1-7-在多线程下出现死循环的问题"}},[s._v("#")]),s._v(" hashMap1.7 在多线程下出现死循环的问题")]),s._v(" "),a("ul",[a("li",[s._v("链表的插入是头插法，多线程下可能会出现环形链表，导致死循环")]),s._v(" "),a("li",[s._v("解决方法：将链表改为尾插法 JDK1.8 之后已经解决了这个问题")])])])}),[],!1,null,null,null);a.default=v.exports}}]);